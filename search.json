[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "💻 Workshops",
    "section": "",
    "text": "🏠 Home\nEste espacio ha sido creado para inspirar a los estudiantes a aprender Python y conceptos fundamentales de programación. En este repositorio, encontrarás ejemplos prácticos y autocontenidos que te permitirán comprender y practicar los principios básicos de la programación en Python, explorando aplicaciones de una manera sencilla y efectiva.\nEsta iniciativa apoya a los alumnos del Colegio Azapa Valley School, promoviendo el valor de la programación en la enseñanza secundaria y fomentando habilidades esenciales para el futuro.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>🏠 Home</span>"
    ]
  },
  {
    "objectID": "index.html#objetivo-del-taller",
    "href": "index.html#objetivo-del-taller",
    "title": "💻 Workshops",
    "section": "🎯 Objetivo del Taller",
    "text": "🎯 Objetivo del Taller\nMotivar a los estudiantes en el aprendizaje de Python y la programación, empleando ejercicios interactivos para desarrollar habilidades prácticas en la creación de funciones, manipulación de datos y resolución de problemas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>🏠 Home</span>"
    ]
  },
  {
    "objectID": "index.html#resultados-de-aprendizaje-esperados",
    "href": "index.html#resultados-de-aprendizaje-esperados",
    "title": "💻 Workshops",
    "section": "📚 Resultados de Aprendizaje Esperados",
    "text": "📚 Resultados de Aprendizaje Esperados\nAl finalizar el taller, los estudiantes habrán desarrollado habilidades clave para la programación y el razonamiento matemático, aplicables en la prueba PAES y en el ámbito universitario:\n\n💻 Comprensión de conceptos básicos de programación en Python y pensamiento estructurado.\n🌐 Ejecución de código en un entorno interactivo, fomentando la autonomía en la resolución de problemas.\n🧩 Resolución de problemas prácticos usando lógica y operaciones matemáticas, reforzando el modelamiento y análisis crítico.\n🔍 Modificación de código para observar resultados, estimulando la curiosidad y la indagación en matemáticas avanzadas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>🏠 Home</span>"
    ]
  },
  {
    "objectID": "index.html#cronograma",
    "href": "index.html#cronograma",
    "title": "💻 Workshops",
    "section": "📅 Cronograma",
    "text": "📅 Cronograma\n\n\n\n\n\n\n\n\nPrograma de actividades\n\n\nHorario de eventos del día\n\n\nInicio\nTérmino\nActividad\n\n\n\n\n10:00\n10:20\nIntroducción: Presentación del taller y objetivos\n\n\n10:20\n11:15\nActividades Prácticas: Ejercicios interactivos y resolución de problemas\n\n\n11:15\n11:30\nCierre y Preguntas: Resumen, preguntas y premiaciones",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>🏠 Home</span>"
    ]
  },
  {
    "objectID": "index.html#talleres",
    "href": "index.html#talleres",
    "title": "💻 Workshops",
    "section": "🚀 Talleres",
    "text": "🚀 Talleres\nTaller Estudiantes:\n\nPrimeros Pasos\nIntroducción a Python\n\n\n💡 Consejo: Para optimizar la experiencia en los talleres, se recomienda que cada estudiante disponga de su propio notebook, o que la actividad se realice en un entorno adecuado, como un laboratorio de computación.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>🏠 Home</span>"
    ]
  },
  {
    "objectID": "material/talleres/intro.html",
    "href": "material/talleres/intro.html",
    "title": "Primeros Pasos",
    "section": "",
    "text": "Programación\nPodríamos definir la esencia de la programación en una frase sencilla:\nLa programación permite delegar actividades repetitivas y tediosas a las máquinas, liberando a los humanos para que se concentren en desafíos más estimulantes. Estos desafíos suelen requerir creatividad, pensamiento crítico y un enfoque subjetivo.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Primeros Pasos</span>"
    ]
  },
  {
    "objectID": "material/talleres/intro.html#programación",
    "href": "material/talleres/intro.html#programación",
    "title": "Primeros Pasos",
    "section": "",
    "text": "“Automatizar tareas para que sean ejecutadas por la computadora.”\n\n\n\n“Se dice que uno no comprende verdaderamente algo hasta que puede explicárselo a otro. En realidad, uno no lo entiende completamente hasta que puede explicárselo a una computadora.” — Donald Knuth",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Primeros Pasos</span>"
    ]
  },
  {
    "objectID": "material/talleres/intro.html#python",
    "href": "material/talleres/intro.html#python",
    "title": "Primeros Pasos",
    "section": "Python",
    "text": "Python\n\nPython se ha convertido en uno de los lenguajes más populares gracias a factores claves como:\n\n\n\n\n\n\n\n\nFactor\nDescripción\nEjemplos\n\n\n\n\nClaridad y simplicidad\nSintaxis fácil de leer y entender.\nif, for, def, class\n\n\nEcosistema de librerías\nAmplia biblioteca estándar para diversas tareas.\nNumPy, Pandas, Requests\n\n\nExtensibilidad\nIntegración con otros lenguajes para mayor rendimiento.\nCython, Pybind11\n\n\nComunidad activa\nSoporte y recursos abundantes.\nGitHub, Stack Overflow, PyPI\n\n\nVersatilidad\nÚtil en ciencia de datos, web, automatización y más.\nDjango, TensorFlow, Selenium\n\n\nPortabilidad\nFunciona en múltiples sistemas operativos.\nWindows, macOS, Linux",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Primeros Pasos</span>"
    ]
  },
  {
    "objectID": "material/talleres/intro.html#uso-de-la-interfaz-web-en-este-taller",
    "href": "material/talleres/intro.html#uso-de-la-interfaz-web-en-este-taller",
    "title": "Primeros Pasos",
    "section": "Uso de la Interfaz Web en este Taller",
    "text": "Uso de la Interfaz Web en este Taller\nEn este taller, emplearemos una tecnología que emula la ejecución de Python en una página web. No requiere instalaciones y se puede usar desde cualquier dispositivo con internet, aunque es un entorno simulado.\nLa interfaz incluye tres botones en la parte superior del contenedor de código: ejecutar, reiniciar y copiar el código. A continuación, se muestra una imagen que ilustra estos botones:\n\n\nEjemplo: 👋 Hola Mundo\nEn el mundo de la programación, es tradicional comenzar aprendiendo a hacer que la computadora muestre el mensaje “Hola, Mundo” (o “Hello World”).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nIntenta modificar el código anterior para que, en lugar de “Hola, Mundo”, el mensaje incluya tu nombre. ¿Cómo cambiarías el saludo?\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Primeros Pasos</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html",
    "href": "material/talleres/taller_1.html",
    "title": "Introducción a Python",
    "section": "",
    "text": "🌡️ Conversión de Temperatura\nUn programa para convertir grados Celsius a Fahrenheit. Este ejercicio es ideal para practicar operaciones matemáticas básicas y el uso de funciones en Python.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#conversión-de-temperatura",
    "href": "material/talleres/taller_1.html#conversión-de-temperatura",
    "title": "Introducción a Python",
    "section": "",
    "text": "Contexto\nLa conversión de temperatura es una operación común en muchos campos científicos, desde la meteorología hasta la física y la química. Conocer cómo convertir entre diferentes unidades de temperatura es esencial en muchas aplicaciones. En este ejercicio, utilizaremos la fórmula de conversión para transformar una temperatura dada en grados Celsius a su equivalente en grados Fahrenheit.\n\n\nFórmula de Conversión\nLa fórmula para convertir grados Celsius a Fahrenheit es:\n\\[ \\text{Fahrenheit} = \\left( \\text{Celsius} \\times \\frac{9}{5} \\right) + 32 \\]\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que convierta grados Celsius a Fahrenheit y pruebe la función con un ejemplo.\n\n\n\n\nDefinir una función: Crearemos una función llamada celsius_a_fahrenheit que tome un parámetro: la temperatura en grados Celsius (celsius).\nImplementar la conversión: Usaremos la fórmula de conversión para calcular la temperatura en grados Fahrenheit.\nProbar la función: Probaremos la función con un valor de ejemplo y mostraremos el resultado.\n\n\n\nCódigo para Conversión de Temperatura\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\n\nParámetro de Entrada:\n\ncelsius: Un número que representa la temperatura en grados Celsius.\n\nFórmula de Conversión:\n\nLa función utiliza la fórmula \\((celsius \\times \\frac{9}{5}) + 32\\) para convertir la temperatura a grados Fahrenheit y devuelve el resultado.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función celsius_a_fahrenheit con un valor de temperatura de ejemplo (25 grados Celsius). Al ejecutar este ejemplo, se imprimirá 25 grados Celsius son 77.0 grados Fahrenheit.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar los valores de celsius para probar diferentes temperaturas y explorar cómo funciona la función. A continuación, se presentan tres ejercicios de ejemplo:\nEjercicio 1: Convertir 0 Grados Celsius a Fahrenheit\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 2: Convertir -10 Grados Celsius a Fahrenheit\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 3: Convertir 100 Grados Celsius a Fahrenheit\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#cálculo-del-índice-de-masa-corporal-imc",
    "href": "material/talleres/taller_1.html#cálculo-del-índice-de-masa-corporal-imc",
    "title": "Introducción a Python",
    "section": "🏋️‍♂️ Cálculo del Índice de Masa Corporal (IMC)",
    "text": "🏋️‍♂️ Cálculo del Índice de Masa Corporal (IMC)\nUn programa para calcular el IMC de una persona. Este ejercicio es útil para practicar operaciones matemáticas y el uso de funciones en Python.\n\nContexto\nEl Índice de Masa Corporal (IMC) es una medida de la grasa corporal basada en la altura y el peso de una persona. La fórmula para calcular el IMC es:\n\\[ \\text{IMC} = \\frac{\\text{peso}}{\\text{altura}^2} \\]\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que calcule el IMC de una persona y pruebe la función con un ejemplo.\n\n\n\n\nDefinir una función: Crearemos una función llamada calcular_imc que tome dos parámetros: el peso (peso) y la altura (altura).\nImplementar el cálculo: Usaremos la fórmula del IMC para calcular el índice y devolver el resultado.\nProbar la función: Probaremos la función con valores de ejemplo y mostraremos el resultado.\n\n\n\nCódigo para el Cálculo del IMC\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\n\nParámetros de Entrada:\n\npeso: Un número que representa el peso de la persona en kilogramos.\naltura: Un número que representa la altura de la persona en metros.\n\nFórmula del IMC:\n\nLa función utiliza la fórmula \\(\\frac{peso}{altura^2}\\) para calcular el IMC y devuelve el resultado.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función calcular_imc con valores de ejemplo (70 kg de peso y 1.75 m de altura). Al ejecutar este ejemplo, se imprimirá Para un peso de 70 kg y una altura de 1.75 m, el IMC es 22.86.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar los valores de peso y altura para probar diferentes combinaciones y explorar cómo funciona la función. A continuación, se presentan tres ejercicios de ejemplo:\nEjercicio 1: Calcular el IMC para un peso de 80 kg y una altura de 1.80 m\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 2: Calcular el IMC para un peso de 60 kg y una altura de 1.60 m\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 3: Calcular el IMC para un peso de 90 kg y una altura de 1.70 m\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#verificación-de-números-pares-e-impares",
    "href": "material/talleres/taller_1.html#verificación-de-números-pares-e-impares",
    "title": "Introducción a Python",
    "section": "2️⃣ Verificación de Números Pares e Impares",
    "text": "2️⃣ Verificación de Números Pares e Impares\nUn programa para verificar si un número es par o impar. Este ejercicio es útil para practicar operaciones matemáticas y el uso de funciones en Python.\n\nContexto\nUn número es considerado par si es divisible por 2, y es impar si no lo es. La condición para verificar esto se puede expresar como:\n\\[\n\\text{Número es par} \\iff \\text{Número} \\% 2 = 0\n\\]\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que determine si un número es par o impar y probar la función con ejemplos.\n\n\n\n\nDefinir una función: Crearemos una función llamada verificar_paridad que tome un parámetro: el número (numero).\nImplementar la verificación: Usaremos el operador módulo (%) para verificar si el número es par o impar y mostrar el resultado correspondiente.\nProbar la función: Probaremos la función con varios números y mostraremos los resultados.\n\n\n\nCódigo para la Verificación de Números Pares e Impares\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\n\nParámetro de Entrada:\n\nnumero: Un número entero que se desea verificar.\n\nVerificación de Paridad:\n\nLa función utiliza el operador módulo % para determinar si el número es divisible por 2. Si es par, se imprime un mensaje indicando que el número es par; de lo contrario, se imprime que es impar.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función verificar_paridad con el número 7. Al ejecutar este ejemplo, se imprimirá El número 7 es impar..\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar el valor de numero para probar si es par o impar y explorar cómo funciona la función. A continuación, se presentan tres ejercicios de ejemplo:\nEjercicio 1: Verificar la paridad de 10\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 2: Verificar la paridad de 15\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 3: Verificar la paridad de 22\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#verificación-de-año-bisiesto",
    "href": "material/talleres/taller_1.html#verificación-de-año-bisiesto",
    "title": "Introducción a Python",
    "section": "📅 Verificación de Año Bisiesto",
    "text": "📅 Verificación de Año Bisiesto\nEn este ejercicio, vamos a crear un programa que determine si un año es bisiesto. Este ejercicio es excelente para practicar el uso de operadores lógicos y condicionales en Python.\n\nContexto\nUn año bisiesto es un año que tiene 366 días en lugar de los 365 días habituales. Este día adicional se añade en febrero, que tiene 29 días en lugar de 28. Las reglas para determinar si un año es bisiesto son las siguientes:\n\nUn año es bisiesto si es divisible por 4.\nSin embargo, si el año es divisible por 100, no es un año bisiesto a menos que también sea divisible por 400.\n\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que determine si un año es bisiesto o no, utilizando las reglas mencionadas anteriormente.\n\n\n\n\nDefinir una función: Crearemos una función llamada es_bisiesto que tome un parámetro: el año (anio) a verificar.\nImplementar la lógica: Usaremos operadores lógicos (and, or) y estructuras condicionales (if, else) para determinar si el año es bisiesto.\nProbar la función: Probaremos la función con diferentes años para asegurarnos de que funcione correctamente.\n\n\n\nCódigo para Verificación de Año Bisiesto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define una función llamada es_bisiesto que realiza lo siguiente:\n\nParámetro de Entrada:\n\nanio: Un entero que representa el año a verificar.\n\nLógica para Determinar Año Bisiesto:\n\nUtiliza operadores lógicos y condicionales para verificar las reglas de un año bisiesto.\nRegla 1: (anio % 4 == 0 and anio % 100 != 0) - Un año es bisiesto si es divisible por 4 y no es divisible por 100.\nRegla 2: (anio % 400 == 0) - Un año es bisiesto si es divisible por 400.\nSi alguna de las reglas es verdadera, la función devuelve True, indicando que el año es bisiesto. De lo contrario, devuelve False.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función es_bisiesto para verificar si el año 2024 es bisiesto. Al ejecutar este ejemplo, se imprimirá 2024 es un año bisiesto.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar el valor de anio para comprobar si es un año bisiesto y explorar cómo funciona la función. A continuación, se presentan tres ejercicios de ejemplo:\nEjercicio 1: Verificar si el año 2024 es bisiesto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 2: Verificar si el año 1900 es bisiesto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 3: Verificar si el año 2000 es bisiesto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#calculadora-básica",
    "href": "material/talleres/taller_1.html#calculadora-básica",
    "title": "Introducción a Python",
    "section": "🧮 Calculadora Básica",
    "text": "🧮 Calculadora Básica\nEn este ejercicio, vamos a crear una simple calculadora que puede realizar operaciones básicas como suma, resta, multiplicación y división. Esta actividad es ideal para que los principiantes practiquen el uso de funciones, operadores aritméticos y estructuras condicionales en Python.\n\nContexto\nUna calculadora es una herramienta fundamental que permite realizar cálculos matemáticos básicos y complejos. En este ejercicio, nos centraremos en construir una calculadora que pueda manejar cuatro operaciones básicas: suma (+), resta (-), multiplicación (*) y división (/). Además, nos aseguraremos de manejar casos especiales como la división por cero, que no es una operación válida en matemáticas y debe ser tratada con cuidado en nuestro código.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que pueda realizar las operaciones básicas de una calculadora y manejar casos especiales como la división por cero.\n\n\n\n\nDefinir una función: Crearemos una función llamada calculadora que tome tres parámetros: la operación a realizar (operacion) y dos números (num1 y num2).\nImplementar las operaciones: Usaremos estructuras condicionales (if, elif, else) para definir las operaciones aritméticas básicas.\nManejo de errores: Incluiremos una verificación para la división por cero y devolveremos un mensaje de error apropiado.\nProbar la función: Probaremos la función con diferentes operaciones y valores para asegurarnos de que funcione correctamente.\n\n\n\nCódigo de la Calculadora\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define una función llamada calculadora que realiza lo siguiente:\n\nParámetros de Entrada:\n\noperacion: Un string que indica la operación a realizar (+, -, *, /).\nnum1: El primer número para la operación.\nnum2: El segundo número para la operación.\n\nEstructura Condicional:\n\nUsa if, elif, y else para verificar qué operación se debe realizar.\nRealiza la operación correspondiente y devuelve el resultado en un formato de cadena que incluye el texto “Resultado:”.\n\nManejo de Errores:\n\nPara la operación de división (/), verifica si num2 es diferente de cero antes de realizar la división. Si num2 es cero, devuelve un mensaje de error “Error: División por cero”.\nSi se proporciona una operación no válida, devuelve “Operación no válida”.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función calculadora con una operación de suma (+), y los números 10 y 5. Al ejecutar este ejemplo, se imprimirá Para la operación 10 + 5, el resultado es Resultado: 15.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar los valores de operacion, num1, y num2 para probar diferentes operaciones y explorar cómo funciona la función de calculadora. A continuación, se presentan seis ejercicios de ejemplo:\nEjercicio 1: Suma de 10 + 5\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 2: Resta de 20 - 10\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 3: Multiplicación de 3 * 4\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 4: División de 10 / 2\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 5: División de 10 / 0 (División por cero)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 6: Operación no válida “+-” con 5 y 7\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#número-primo",
    "href": "material/talleres/taller_1.html#número-primo",
    "title": "Introducción a Python",
    "section": "🔢 Número Primo",
    "text": "🔢 Número Primo\nUn programa para verificar si un número es primo. Este ejercicio es útil para practicar el uso de bucles, estructuras condicionales y funciones en Python.\n\nContexto\nUn número primo es un número mayor que 1 que no tiene divisores positivos además de 1 y sí mismo. Este ejercicio consiste en determinar si un número dado es primo.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que verifique si un número es primo y pruebe la función con un ejemplo.\n\n\n\n\nDefinir una función: Crearemos una función llamada es_primo que tome un parámetro: el número a verificar (n).\nImplementar la verificación: Usaremos un bucle para comprobar si el número tiene divisores distintos de 1 y sí mismo.\nProbar la función: Probaremos la función con un valor de ejemplo y mostraremos el resultado.\n\n\n\nCódigo para Verificación de Número Primo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define una función llamada es_primo que realiza lo siguiente:\n\nParámetro de Entrada:\n\nn: Un entero que representa el número a verificar.\n\nLógica de Verificación:\n\nSi n es menor o igual a 1, la función devuelve False indicando que no es un número primo.\nUsa un bucle for para iterar desde 2 hasta n-1. Si n es divisible por cualquier número en este rango, la función devuelve False indicando que no es un número primo.\nSi el bucle termina sin encontrar divisores, la función devuelve True indicando que el número es primo.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función es_primo con un valor de ejemplo (29). Al ejecutar este ejemplo, se imprimirá 29 es un número primo.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar el valor de numero para probar si es un número primo y explorar cómo funciona la función. A continuación, se presentan cuatro ejercicios de ejemplo:\nEjercicio 1: Verificar si 29 es un número primo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 2: Verificar si 15 es un número primo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 3: Verificar si 2 es un número primo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 4: Verificar si 17 es un número primo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#conjetura-de-collatz",
    "href": "material/talleres/taller_1.html#conjetura-de-collatz",
    "title": "Introducción a Python",
    "section": "📜 Conjetura de Collatz",
    "text": "📜 Conjetura de Collatz\nEn este ejercicio, vamos a crear un programa que implemente la Conjetura de Collatz, también conocida como la conjetura 3n + 1. Este ejercicio es excelente para practicar el uso de bucles, listas y estructuras condicionales en Python.\n\nContexto\nLa Conjetura de Collatz es un problema matemático no resuelto que involucra una secuencia de números. Comienza con cualquier número positivo entero n y aplica las siguientes reglas repetidamente:\n\nSi n es par, se divide por 2.\nSi n es impar, se multiplica por 3 y se le suma 1.\n\nLa conjetura afirma que, no importa qué valor inicial se elija, la secuencia siempre llegará a 1.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que implemente la Conjetura de Collatz y genere la secuencia de números hasta llegar a 1.\n\n\n\n\nDefinir una función: Crearemos una función llamada conjetura_de_collatz que tome un parámetro: el número inicial (n).\nImplementar la lógica: Usaremos un bucle while para generar la secuencia de números aplicando las reglas de la conjetura.\nProbar la función: Probaremos la función con un número inicial y mostraremos la secuencia generada.\n\n\n\nCódigo para la Conjetura de Collatz\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define una función llamada conjetura_de_collatz que realiza lo siguiente:\n\nParámetro de Entrada:\n\nn: Un entero positivo que representa el número inicial de la secuencia.\n\nLista de Resultados:\n\nresultado: Una lista que almacenará la secuencia de números generada por la conjetura.\n\nLógica del Bucle:\n\nUsa un bucle while que continúa hasta que n sea igual a 1.\nEn cada iteración, añade el valor actual de n a la lista resultado.\nSi n es par, lo divide por 2 usando n // 2.\nSi n es impar, lo multiplica por 3 y le suma 1 usando 3 * n + 1.\n\nAñadir el Valor Final:\n\nDespués de salir del bucle, añade el valor final 1 a la lista resultado.\n\nDevolver la Secuencia:\n\nLa función devuelve la lista resultado que contiene la secuencia completa de números.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función conjetura_de_collatz con un número inicial de 6. Al ejecutar este ejemplo, se imprimirá la secuencia generada, mostrando cada número en la secuencia hasta llegar a 1.\n6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar el valor de numero para explorar la secuencia generada por la Conjetura de Collatz y observar cómo funciona la función. A continuación, se presentan cuatro ejercicios de ejemplo:\nEjercicio 1: Generar la secuencia de Collatz para el número 6\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 2: Generar la secuencia de Collatz para el número 7\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 3: Generar la secuencia de Collatz para el número 15\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 4: Generar la secuencia de Collatz para el número 27\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#conclusiones",
    "href": "material/talleres/taller_1.html#conclusiones",
    "title": "Introducción a Python",
    "section": "Conclusiones",
    "text": "Conclusiones\nEl uso de Python en la enseñanza de las matemáticas no solo moderniza el aprendizaje, sino que también lo vuelve más interactivo y entretenido. A través de ejercicios prácticos como la conversión de temperatura, el cálculo del IMC y la exploración de secuencias matemáticas, los estudiantes adquieren habilidades clave para el mundo tecnológico.\n\n\n\n\n\n\nDesafío para Estudiantes:\n\n\n\n\n\nEl desafío para los estudiantes es seguir explorando y practicando con Python para hacer las matemáticas más divertidas y comprensibles. ¡Atrévete a resolver problemas, experimentar con nuevas ideas y descubrir cómo la programación puede mejorar tu comprensión de la ciencia y la tecnología!\n\n\n\n\n🔑 Nota: Para aquellos interesados en continuar su aprendizaje, pueden visitar este sitio de recursos para acceder a material educativo adicional.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/anexos/cierre_evento.html",
    "href": "material/anexos/cierre_evento.html",
    "title": "Cierre Evento",
    "section": "",
    "text": "🎯 Retroalimentación\nNos encantaría conocer tu opinión sobre esta experiencia y saber en qué aspectos podemos mejorar. Te agradeceríamos mucho que tomaras unos minutos para completar la siguiente encuesta:\n\n \n\nhttps://forms.gle/MjQFihE1RiKzVgid9\n\n\n\n\n\nCódigo para sorteo\nPara sortear algunos premios utilizaremos, por supuesto, un código de python. Usaremos la función random.randint(a, b) que retorna un número entero aleatorio \\(N\\) que cumpla la condición \\(a &lt;= N &lt;= b\\).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cierre Evento</span>"
    ]
  },
  {
    "objectID": "material/anexos/aprendizaje.html",
    "href": "material/anexos/aprendizaje.html",
    "title": "Seguir Aprendiendo",
    "section": "",
    "text": "Recursos Recomendados",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Seguir Aprendiendo</span>"
    ]
  },
  {
    "objectID": "material/anexos/aprendizaje.html#recursos-recomendados",
    "href": "material/anexos/aprendizaje.html#recursos-recomendados",
    "title": "Seguir Aprendiendo",
    "section": "",
    "text": "Cursos en Línea\n\nCoursera: “Python for Everybody” de la Universidad de Míchigan.\nedX: “Programming for Everybody” del MIT.\nUdemy: “Complete Python Bootcamp” y otros cursos desde nivel básico a avanzado.\n\nPlataformas Interactivas\n\nCodecademy: Curso interactivo de Python.\nDataCamp: Cursos especializados en Python para ciencia de datos.\n\nDocumentación y Recursos Comunitarios\n\nDocumentación Oficial de Python: Guía completa para aprender Python, desde lo básico hasta temas avanzados.\nPython.org Tutorial: Introducción para principiantes, cubriendo los fundamentos del lenguaje.\nStack Overflow: Comunidad para resolver dudas y aprender de problemas reales.\nGitHub: Explora proyectos de código abierto en Python.\n\nLibros Recomendados\n\n“Automate the Boring Stuff with Python” de Al Sweigart.\n“Python Crash Course” de Eric Matthes.\n“Fluent Python” de Luciano Ramalho.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Seguir Aprendiendo</span>"
    ]
  },
  {
    "objectID": "material/anexos/aprendizaje.html#consejos-para-aprender-python",
    "href": "material/anexos/aprendizaje.html#consejos-para-aprender-python",
    "title": "Seguir Aprendiendo",
    "section": "Consejos para Aprender Python",
    "text": "Consejos para Aprender Python\n\nPractica Regularmente: Escribe código diariamente, aunque sea por poco tiempo.\nParticipa en Proyectos Reales: Contribuye a proyectos en GitHub o crea los tuyos.\nResuelve Ejercicios y Retos: Utiliza plataformas como LeetCode, HackerRank, y CodeWars.\nÚnete a Comunidades: Participa en r/learnpython en Reddit y Python Discord.\nMantente Actualizado: Sigue blogs, webinars y conferencias para aprender sobre nuevas versiones y mejores prácticas.\n\nCon estos recursos y consejos, estarás bien encaminado para dominar Python y aplicarlo con éxito en tus proyectos y en tu carrera profesional.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Seguir Aprendiendo</span>"
    ]
  },
  {
    "objectID": "material/anexos/tecnologia.html",
    "href": "material/anexos/tecnologia.html",
    "title": "Sobre la página",
    "section": "",
    "text": "Esta página fue creada con quarto y la extensión quarto-pyodide\n\n\n\nFiltro quarto-pyodide en acción\n\n\nPuedes ver el ejemplo completo de la extensión en acción aquí.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sobre la página</span>"
    ]
  },
  {
    "objectID": "material/anexos/autoria.html",
    "href": "material/anexos/autoria.html",
    "title": "Autoría",
    "section": "",
    "text": "Este material ha sido creado por Francisco Alfaro y Valeska Canales para apoyar a los estudiantes del Colegio Azapa Valley School en su aprendizaje de Python y matemáticas.\nNuestro objetivo es motivar a los estudiantes a explorar la programación y las matemáticas de manera divertida y accesible, a través de herramientas y recursos que faciliten la comprensión y el interés en estos temas. Ofrecemos ejemplos prácticos, problemas entretenidos y actividades interactivas que ayudan a desarrollar habilidades en Python y a profundizar en conceptos matemáticos aplicables a su formación.\nPara más información, estamos disponibles en los correos electrónicos: francisco.alfaro.496@gmail.com, valeska.canales.p@gmail.com.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Autoría</span>"
    ]
  }
]